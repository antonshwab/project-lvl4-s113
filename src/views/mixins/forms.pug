- const getInputName = (f, property) => `${f.name}[${property}]`

mixin formFor(options = {})
  - const realMethod = options['as']
  - const dataConfirm = options['dataConfirm']
  if dataConfirm
    form(action=_.get(options, 'url') method=_.get(options, 'method', 'get') data-confirm=dataConfirm)
      if realMethod
        input(type="hidden" name="_method" value=realMethod)
      block
  else  
    form(action=_.get(options, 'url') method=_.get(options, 'method', 'get'))
      if realMethod
        input(type="hidden" name="_method" value=realMethod)
      block

mixin input(f, property, label, options = { as: 'text' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= label || property
    input(name=getInputName(f, property) class='form-control' type=options['as'] value=`${value}`)
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin textarea(f, property, label, options = { rows: '3' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
  label= label || property
  textarea(name=getInputName(f, property) class='form-control' rows=options['rows'])= value
  if f.errors[property]
    .form-control-feedback= f.errors[property].map(({message}) => message).join('. ')
  
mixin select(f, property, label, items, options = { value: '1', text: 'name' })
  - const value = f.object[property] === undefined ? '' : f.object[property]
  .form-group(class=(f.errors[property] && 'has-danger'))
    label= label || property
    select(name=getInputName(f, property) class='form-control')
      if items
        each item in items
          option(value= item[options['value']], selected= item[options['value']] === parseInt(value) )= `${item[options['text']]}`
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({message}) => message).join('. ')

mixin selectUser(f, property, label, users)
  .form-group(class=(f.errors[property] && 'has-danger'))
  label= label
  select(name=getInputName(f, property) class='form-control')
    if users
      each user in users
        option(value= user.id)= `${user.fullName}`
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin selectStatus(f, property, label, statuses)
  .form-group(class=(f.errors[property] && 'has-danger'))
  label= label
  select(name=getInputName(f, property) class='form-control')
    if statuses
      each status in statuses
        option(value= status.id)= `${status.name}`
    if f.errors[property]
      .form-control-feedback= f.errors[property].map(({ message }) => message).join('. ')

mixin task(preparedTask)
  div.container
    div.row
      div.col-2='ID:'
      div.col-10=`${preparedTask.id}`
    div.row
      div.col-2='Task:'
      div.col-10=`${preparedTask.name}`
    div.row
      div.col-2='Description:'
      div.col-10=`${preparedTask.description}`
    div.row
      div.col-2='Status:'
      div.col-10=`${preparedTask.status}`
    div.row
      div.col-2='Creator:'
      div.col-10=`${preparedTask.creator}`
    div.row
      div.col-2='Assign to:'
      div.col-10=`${preparedTask.assignedTo}`
    div.row
      div.col-2='Tags:'
      div.col-10
        ul.list-inline
          each tag in preparedTask.tags
            li.list-item= tag
